{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Programmierung des Algorithmus\n",
    "\n",
    "Wir werden uns nun Schritt f√ºr Schritt die n√∂tigen Methoden den k-Means-Clustering Algorithmus erarbeiten. Um am Ende nicht ein gro√ües Codefragment zu haben, versuchen wir, soviel Vorarbeit wie m√∂glich zu erledigen, so dass du dich am Ende ganz auf die Implementierung der Teile des Algorithmus konzentrieren kannst (Stichwort: externe kognitive Belastung gering halten, siehe [Cognitive Load Theory (CLT)](https://de.wikipedia.org/wiki/Cognitive_Load_Theory) üòâ)\n",
    "\n",
    "```{admonition} Hinweis\n",
    ":class: note\n",
    "Die folgenden Unterpunkte bis zur [ersten Aufgabe](#k-means-aufgabe-1) sind nicht essentiel, um den Algorithmus zu verstehen, aber dennoch hilfreich f√ºr die sp√§tere Implementierung. Und auch generell wichtig f√ºr das vielleicht sp√§tere Leben als ProgrammiererIn.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logging und Loglevel\n",
    "\n",
    "W√§hrend der Programmierung ist es von gro√üem Vorteil, Informationen, Warnungen und Fehler per **Logging** auszugeben. Diese Nachrichtensammlungen, **Logs** genannt, helfen dir, Fehler zu finden und die Ursache f√ºr Bugs zu verstehen.  \n",
    "\n",
    "Nachrichten lassen sich mit verschiedenen **Loglevel** ausgeben. Das sind Kategorien, die angeben, wie wichtig eine Nachricht im Log ist. Meist gibt es die hierarchischen Loglevel `DEBUG`, `INFORMATION`, `WARNING`, `ERROR` und `FATAL`. Hierarchisch bedeutet: wenn der Loglevel `WARNING` gesetzt ist, dann werden alle Nachrichten $>=$ `WARNING` ausgegeben. Wenn der Loglevel `DEBUG` gesetzt ist, werden alle Nachrichten ohne Einschr√§nkung ausgegeben.\n",
    "\n",
    "Wir verwenden f√ºr unser Logging die Loglevel `DEBUG` und `INFORMATION`. Somit k√∂nnen wir generelle Programmablauf-Informationen ausgeben und auch mal Debug-Nachrichten, um einen Fehler in einer Methode zu finden. \n",
    "\n",
    "Damit du es in den Aufgaben einfacher hast, wird das Logging hier konfiguriert und aktiviert. Du kannst jederzeit\n",
    "mit `logger.info()` und `logger.debug()` Nachrichten ausgeben. Nachrichten, die mit `logger.debug()` ausgegeben werden, werden nur angezeigt, wenn der Loglevel `DEBUG` gesetzt ist. Wenn du den Loglevel auf `logging.DEBUG` setzt, werden beide Nachrichten ausgegeben. Du kannst den Loglevel auch nur f√ºr bestimmte Bereiche oder Methoden √§ndern, siehe das Beispiel unten\n",
    "\n",
    "```{admonition} Warum nicht print()\n",
    ":class: note\n",
    "Nat√ºrlich kannst du auch einfach alles mit `print()`-Befehlen ausgeben. Dann werden aber immer alle Nachrichten ausgegeben, au√üer du hast sie gerade auskommentiert. Mit dem Loglevel-Schalter lassen sich die Nachrichten so bequem filtern, wie die du es gerade brauchst, ohne die Nachrichten ein- und auskommentieren zu m√ºssen.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "DEBUG: Das Log-Level ist auf DEBUG gesetzt\n",
      "DEBUG: Diese Nachricht angezeigt, weil das Log-Level auf DEBUG gesetzt ist\n",
      "INFO: Das Log-Level ist auf INFO gesetzt\n"
     ]
    }
   ],
   "source": [
    "import logging\n",
    "\n",
    "# Konfiguration f√ºr das Logging\n",
    "logging.basicConfig(format='%(levelname)s: %(message)s')\n",
    "logger = logging.getLogger(__name__)\n",
    "\n",
    "# Loglevel INFO:  Informationen √ºber den Verlauf des Programms\n",
    "# Loglevel DEBUG: Detaillierte Informationen f√ºr die Fehlersuche\n",
    "logger.setLevel(logging.INFO)\n",
    "\n",
    "# Info-Nachricht, hilfreich f√ºr den Programmverlauf\n",
    "logger.info('Das Loggen ist eingerichtet')\n",
    "\n",
    "# Debug-Nachricht, hilfreich f√ºr die Fehlersuche\n",
    "logger.setLevel(logging.DEBUG)\n",
    "logger.debug('Das Log-Level ist auf DEBUG gesetzt')\n",
    "logger.debug('Diese Nachricht angezeigt, weil das Log-Level auf DEBUG gesetzt ist')\n",
    "logger.setLevel(logging.INFO)\n",
    "logger.info('Das Log-Level ist auf INFO gesetzt')\n",
    "logger.debug('Diese Nachricht wird nicht angezeigt, weil das Log-Level wieder auf INFO gesetzt ist')\n",
    "\n",
    "logger.setLevel(logging.INFO)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Unit Tests\n",
    "\n",
    "Wir werden zum Testen unserer Methoden **Unit-Tests** verwenden. Das sind kleine, automatisierte Tests, die jeweils eine **einzelne** Funktion oder Methode in einem Programm √ºberpr√ºfen. Sie helfen sicherzustellen, dass jede Komponente des Codes genau das tut, was sie tun soll. Stell dir Unit-Tests wie eine Checkliste vor, die jede Funktion Schritt f√ºr Schritt √ºberpr√ºft, ob sie die erwarteten Ergebnisse liefert.  \n",
    "\n",
    "Bei den einzelnen Methoden sind die Unit-Tests bereits hinterlegt, sodass sie dir eine Hilfe bei der Implementierung geben.\n",
    "\n",
    "```{admonition} Bei Interesse: weitere Infos zu Unit-Tests\n",
    ":class: note, dropdown\n",
    "**Vorteile von Unit-Tests:**\n",
    "\n",
    "- **Fr√ºhes Erkennen von Fehlern**: Unit-Tests helfen dabei, Fehler fr√ºh zu finden, noch bevor der ganze Code zusammengesetzt wird. Das macht es einfacher und billiger, diese Fehler zu beheben.\n",
    "- **Sicherheit bei √Ñnderungen**: Wenn du etwas an deinem Code √§nderst, kannst du die Unit-Tests erneut ausf√ºhren, um sicherzustellen, dass die √Ñnderung nichts kaputt gemacht hat. Sie geben also Vertrauen, dass alte Funktionen nach wie vor korrekt laufen.\n",
    "- **Besserer Code**: Oft sorgt das Schreiben von Unit-Tests daf√ºr, dass der eigentliche Code sauberer und verst√§ndlicher wird, weil man genau √ºberlegen muss, was die Funktion tut.\n",
    "- **Dokumentation**: Unit-Tests dokumentieren, wie der Code verwendet wird und welche Eingaben erwartete Ausgaben ergeben. Das hilft anderen Entwickler:innen (oder deinem zuk√ºnftigen Selbst), den Code besser zu verstehen.  \n",
    "\n",
    "Mit Unit-Tests bist du also gut aufgestellt, um zuverl√§ssigen und stabilen Code zu schreiben, der leichter zu warten ist.\n",
    "```\n",
    "\n",
    "```{warning}\n",
    "F√ºr die Unit-Tests ben√∂tigen wir die Python Bibliothek `pytest`. Falls diese nicht installiert ist, kann sie per Cmd oder Powershell mit dem Befehl `pip install pytest` installiert werden.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Damit wir weiter unten die Unit-Tests ausf√ºhren k√∂nnen, importieren wir pytest\n",
    "import pytest\n",
    "import inspect\n",
    "\n",
    "# Falls die Bibliothek pytest nicht installiert ist, kann sie mit dem Befehl\n",
    "# pip install pytest\n",
    "# installiert werden.\n",
    "\n",
    "def ist_gerade(zahl):\n",
    "    return zahl % 2 == 0\n",
    "    \n",
    "\n",
    "# Unit Test f√ºr ist_gerade()\n",
    "def test_ist_gerade():\n",
    "    assert ist_gerade(2) == True\n",
    "    assert ist_gerade(3) == False\n",
    "\n",
    "# Ausf√ºhren der Tests\n",
    "test_ist_gerade()\n",
    "\n",
    "# Diese Nachricht wird nur angezeigt, wenn der Test erfolgreich war\n",
    "print(\"Tests f√ºr ist_gerade() erfolgreich\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Hilfsklasse Datenpunkt\n",
    "Wir erstellen uns zun√§chst eine Hilfsklasse `Datenpunkt`, mit welcher wir die Koordinaten der Datenpunkte aus den Eingabedaten verwalten k√∂nnen. In dieser Klasse erweitern wir noch die internen Methoden `__eq__()` und `__hash__()`, damit wir es sp√§ter leichter haben, die neuen Zentroiden mit den alten Zentroiden der vorigen Iteration zu vergleichen (siehe Schritt 5 des [Algorithmus](#k-means-clustering-algorithmus)). Es w√§re auch m√∂glich, die Koordinaten in Tupeln oder verschachtelten Arrays zu verwalten, aber die L√∂sung einer eigenen Klasse ist eleganter und wir k√∂nnen Komplexit√§t in diese Klasse extrahieren.\n",
    "\n",
    "```{admonition} Zentroiden & Datenpunkte\n",
    ":class: note\n",
    "Zentroiden sind nichts anderes als Datenpunkte wie aus den Eingabedaten. Beide zeichnet aus, dass sie `X`- und `Y`-Koordinaten haben.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Klasse Datenpunkt definiert\n"
     ]
    }
   ],
   "source": [
    "class Datenpunkt:\n",
    "    \"\"\"Klasse zur Darstellung eines Datenpunktes im 2D-Raum.\"\"\"\n",
    "    def __init__(self, x: float, y: float) -> None:\n",
    "        \"\"\"Initialisiert einen Datenpunkt mit den gegebenen Koordinaten, gerundet auf zwei Dezimalstellen.\"\"\"\n",
    "        self.x = round(x, 2)\n",
    "        self.y = round(y, 2)\n",
    "\n",
    "    def __eq__(self, anderer_datenpunkt: object) -> bool:\n",
    "        \"\"\"Vergleicht zwei Datenpunkte basierend auf ihren Koordinaten.\"\"\"\n",
    "        if isinstance(anderer_datenpunkt, Datenpunkt):\n",
    "            return self.x == anderer_datenpunkt.x and self.y == anderer_datenpunkt.y\n",
    "        return False\n",
    "    \n",
    "    def __hash__(self) -> int:\n",
    "        \"\"\"Berechnet den Hashwert eines Datenpunktes.\"\"\"\n",
    "        return hash((self.x, self.y))\n",
    "    \n",
    "    def __repr__(self) -> str:\n",
    "        \"\"\"Gibt eine lesbare Repr√§sentation eines Datenpunktes zur√ºck.\"\"\"\n",
    "        return f\"Datenpunkt({self.x}, {self.y})\"\n",
    "\n",
    "logger.info('Klasse Datenpunkt definiert')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unit-Tests f√ºr `Datenpunkt`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Datenpunkt-Tests erfolgreich durchgelaufen!\n"
     ]
    }
   ],
   "source": [
    "def test_datenpunkt_erstellt_richtige_koordinaten():\n",
    "    # Erfolgreicher Testfall zur √úberpr√ºfung der Initialisierung\n",
    "    punkt = Datenpunkt(3.456, 7.891)\n",
    "    assert punkt.x == 3.46, f\"Erwarteter x-Wert: 3.46, aber erhalten: {punkt.x}\"  # Erwartetes Runden auf zwei Dezimalstellen\n",
    "    assert punkt.y == 7.89, f\"Erwarteter y-Wert: 7.89, aber erhalten: {punkt.y}\"\n",
    "\n",
    "def test_datenpunkt_gleichheit():\n",
    "    # Erfolgreicher Testfall zur √úberpr√ºfung der Gleichheit\n",
    "    punkt1 = Datenpunkt(2.0, 3.0)\n",
    "    punkt2 = Datenpunkt(2.00, 3.00)\n",
    "    assert punkt1 == punkt2, f\"Die Datenpunkte sollten gleich sein: {punkt1} und {punkt2}\"  # Erwartet, dass die Punkte gleich sind\n",
    "\n",
    "    # Failing Testcase zur √úberpr√ºfung der Ungleichheit\n",
    "    punkt3 = Datenpunkt(2.0, 3.0)\n",
    "    punkt4 = Datenpunkt(3.0, 2.0)\n",
    "    assert punkt3 != punkt4, f\"Die Datenpunkte sollten ungleich sein: {punkt3} und {punkt4}\"  # Erwartet, dass die Punkte ungleich sind\n",
    "\n",
    "test_datenpunkt_erstellt_richtige_koordinaten()\n",
    "test_datenpunkt_gleichheit()\n",
    "print(\"Tests f√ºr die Klasse Datenpunkt erfolgreich\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zuf√§llige Datenpunkte generieren\n",
    "\n",
    "Wir m√∂chten uns keine Datenpunkte ausdenken m√ºssen und unsere sp√§tere `kmeans()`-Methode mit beliebig gro√üen Datens√§tzen testen k√∂nnen. Daf√ºr verwenden wir die Methode `generiere_datenpunkte()`. Dieser k√∂nnen wir die Anzahl der gew√ºnschten Datenpunkte und den gew√ºnschten Zahlenraum angeben. Wir erhalten eine Liste von `Datenpunkten` zur√ºck."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Funktion generiere_datenpunkte definiert\n",
      "INFO: Generierte Datenpunkte im 10x10 Zahlenraum: {Datenpunkt(2.75, 2.23), Datenpunkt(7.36, 6.77), Datenpunkt(6.39, 0.25)}\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "# Damit wir einerseits zuf√§llige Zahlen generieren k√∂nnen, aber andererseits auch reproduzierbare\n",
    "# Ergebnisse erhalten, setze wir den Zufallsgenerator auf einen fixen Wert.\n",
    "random.seed(42)\n",
    "\n",
    "def generiere_datenpunkte(anzahl_datenpunkte: int, zahlenraum: int = 10) -> list[Datenpunkt]:\n",
    "    \"\"\"Generiert eine Liste von zuf√§lligen Datenpunkten im angegebenen Zahlenraum.  \n",
    "       Return: Liste der generierten Datenpunkte.  \n",
    "       Z.B: [Datenpunkt(1.4, 2.3), Datenpunkt(3.1, 4.5), Datenpunkt(5.7, 6.2)]\"\"\"\n",
    "    # Set, um Duplikate zu vermeiden\n",
    "    datenpunkte = set()\n",
    "    # Solange die Anzahl der generierten Datenpunkte kleiner als die gew√ºnschte Anzahl ist,\n",
    "    # neue Datenpunkte generieren und hinzuf√ºgen\n",
    "    while len(datenpunkte) < anzahl_datenpunkte:\n",
    "        # Zuf√§llige Koordinaten im Zahlenraum generieren\n",
    "        x = random.uniform(0, zahlenraum)\n",
    "        y = random.uniform(0, zahlenraum)\n",
    "        datenpunkt = Datenpunkt(x, y)\n",
    "        datenpunkte.add(datenpunkt)\n",
    "    logger.debug(f\"Generierte Datenpunkte im {zahlenraum}x{zahlenraum} Zahlenraum: {datenpunkte}\")\n",
    "    return list(datenpunkte)\n",
    "\n",
    "logger.info('Funktion generiere_datenpunkte definiert')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unit-Tests f√ºr `generiere_datenpunkte()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Generierte Datenpunkte im 10x10 Zahlenraum: {Datenpunkt(6.5, 5.45), Datenpunkt(0.27, 1.99), Datenpunkt(4.22, 0.3), Datenpunkt(8.92, 0.87), Datenpunkt(2.19, 5.05)}\n"
     ]
    }
   ],
   "source": [
    "def test_generiere_datenpunkte():\n",
    "    # Testfall zur √úberpr√ºfung der Generierung von Datenpunkten\n",
    "    anzahl_datenpunkte = 5\n",
    "    zahlenraum = 10\n",
    "    datenpunkte = generiere_datenpunkte(anzahl_datenpunkte, zahlenraum)\n",
    "    assert len(datenpunkte) == anzahl_datenpunkte, f\"Erwartete Anzahl der Datenpunkte: {anzahl_datenpunkte}, aber erhalten: {len(datenpunkte)}\"\n",
    "    for datenpunkt in datenpunkte:\n",
    "        assert 0 <= datenpunkt.x <= 10, f\"Erwartet, dass x innerhalb des Zahlenraums {zahlenraum} liegt, aber erhalten: {datenpunkt.x}\"\n",
    "        assert 0 <= datenpunkt.y <= 10, f\"Erwartet, dass y innerhalb des Zahlenraums {zahlenraum} liegt, aber erhalten: {datenpunkt.y}\"\n",
    "\n",
    "test_generiere_datenpunkte()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zentroiden initialisieren\n",
    "\n",
    "Nun geht es in Richtung des k-Mean-Clustering Algorithmus. Die Methode `initialisiere_zentroiden` w√§hlt aus der √ºbergebenen Liste von Datenpunkten zuf√§llig die gew√ºnschte Anzahl der Zentroiden aus. Die Auswahl ist zwar **zuf√§llig**, bleibt **aber reproduzierbar**, weil wir ja weiter oben schon den Zufallsgenerator auf einen fixen Wert gesetzt haben. Die Methode gibt eine Liste von `Datenpunkten` zur√ºck."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Funktion initialisiere_zentroiden definiert\n",
      "INFO: Generierte Datenpunkte im 10x10 Zahlenraum: {Datenpunkt(8.47, 6.04), Datenpunkt(5.36, 9.73), Datenpunkt(8.06, 6.98), Datenpunkt(0.93, 0.97), Datenpunkt(3.79, 5.52), Datenpunkt(8.07, 7.3), Datenpunkt(3.4, 1.55), Datenpunkt(9.57, 3.37), Datenpunkt(8.09, 0.06), Datenpunkt(2.2, 5.89)}\n"
     ]
    }
   ],
   "source": [
    "def initialisiere_zentroiden(datenpunkte: list[Datenpunkt], anzahl_zentroiden: int) -> list[Datenpunkt]:\n",
    "    \"\"\"W√§hlt zuf√§llig die angegebene Anzahl von Zentroiden aus den Datenpunkten aus.\n",
    "       Args:\n",
    "            datenpunkte: Liste von Datenpunkten, aus denen die Zentroiden ausgew√§hlt werden.\n",
    "            anzahl_zentroiden: Anzahl der Zentroiden, die initialisiert werden sollen.\n",
    "       Returns:\n",
    "            list[Datenpunkt]: Liste der initialisierten Zentroiden.\n",
    "        Example:\n",
    "        >>> datenpunkte = [Datenpunkt(1.4, 4.5), Datenpunkt(5.2, 8.3), Datenpunkt(3.1, 9.2), Datenpunkt(3.1, 6.2)]\n",
    "        >>> anzahl_zentroiden = 2\n",
    "        >>> result = initialisiere_zentroiden(datenpunkte, anzahl_zentroiden)\n",
    "        >>> len(result) == 2\n",
    "        True\n",
    "        >>> all(zentroid in datenpunkte for zentroid in result)\n",
    "        True\n",
    "    \"\"\"\n",
    "    zentroiden = random.sample(datenpunkte, anzahl_zentroiden)\n",
    "    logger.debug(f\"Initialisierte Zentroiden: {zentroiden}\")\n",
    "    return zentroiden\n",
    "\n",
    "logger.info('Funktion initialisiere_zentroiden definiert')\n",
    "doctest.run_docstring_examples(initialisiere_zentroiden, globals(), verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unit-Tests f√ºr `initialisiere_zentroiden()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "def test_initialisiere_zentroiden():\n",
    "    # Testfall zur √úberpr√ºfung der Initialisierung der Zentroiden\n",
    "    datenpunkte = [Datenpunkt(x, y) for x, y in [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]]\n",
    "    anzahl_zentroiden = 5\n",
    "    zentroiden = initialisiere_zentroiden(datenpunkte, anzahl_zentroiden)\n",
    "    assert len(zentroiden) == anzahl_zentroiden, f\"Erwartete Anzahl der Zentroiden: {anzahl_zentroiden}, aber erhalten: {len(zentroiden)}\"\n",
    "    for zentroid in zentroiden:\n",
    "        assert zentroid in datenpunkte, f\"Erwartet, dass der Zentroid aus den Datenpunkten stammt, aber erhalten: {zentroid}\"\n",
    "\n",
    "test_initialisiere_zentroiden()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "```{admonition} Your turn\n",
    ":class: tip\n",
    "**Ab hier beginnt dein Teil der Arbeit, viel Spa√ü und Erfolg üí™**\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(k-means-aufgabe-1)=\n",
    "# Aufgabe 1: Berechnen der Distanz zwischen zwei Datenpunkten\n",
    "\n",
    "Du brauchst eine Methode, welche dir die Distanz zwischen zwei Datenpunkten berechnet. Wir werden hierf√ºr als [Distanzma√üe](#distanzmasse) die Euklidische Distanz verwenden. Die Methode erh√§lt zwei Datenpunkte und gibt die Distanz auf zwei Nachkommastellen gerundet zur√ºck (siehe [round()](https://www.w3schools.com/python/ref_func_round.asp))."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Funktion berechne_euklidische_distanz definiert\n"
     ]
    }
   ],
   "source": [
    "def berechne_euklidische_distanz(datenpunkt1: Datenpunkt, datenpunkt2: Datenpunkt) -> float:\n",
    "    \"\"\"Berechne die euklidische Distanz zu einem anderen Datenpunkt.  \n",
    "        Return: Euklidische Distanz zwischen zwei Datenpunkten.  \n",
    "        Z.B: 2.83\"\"\"\n",
    "    ...  # Hier L√∂sung erg√§nzen\n",
    "    diff_x = datenpunkt1.x - datenpunkt2.x\n",
    "    diff_y = datenpunkt1.y - datenpunkt2.y\n",
    "    distanz = (diff_x ** 2 + diff_y ** 2) ** 0.5\n",
    "    return round(distanz, 2)\n",
    "\n",
    "logger.info('Funktion berechne_euklidische_distanz definiert')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unit-Tests f√ºr `berechne_euklidische_distanz()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "def test_berechne_euklidische_distanz():\n",
    "    # Erfolgreicher Testfall\n",
    "    punkt1 = Datenpunkt(1, 2)\n",
    "    punkt2 = Datenpunkt(4, 6)\n",
    "    result = berechne_euklidische_distanz(punkt1, punkt2)\n",
    "    assert result == 5.0, f\"Erwarteter Wert: 5.0, aber erhalten: {result}\"  # Erwarteter Wert ist 5.0\n",
    "\n",
    "def test_berechne_euklidische_distanz_rundung():\n",
    "    # Testfall zur √úberpr√ºfung der Rundung\n",
    "    punkt1 = Datenpunkt(0, 0)\n",
    "    punkt2 = Datenpunkt(1, 1)\n",
    "    result = berechne_euklidische_distanz(punkt1, punkt2)\n",
    "    assert result == 1.41, f\"Erwarteter gerundeter Wert: 1.41, aber erhalten: {result}\"  # Erwartet, dass der Wert korrekt gerundet wird\n",
    "\n",
    "test_berechne_euklidische_distanz()\n",
    "test_berechne_euklidische_distanz_rundung()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Aufgabe 2: Ermitteln des n√§chsten (besten) Zentroiden\n",
    "\n",
    "Nun wollen wir f√ºr einen `Datenpunkt` den n√§chstgelegenen Zentroiden ermitteln. Wir bekommen daf√ºr die Liste von Zentroiden √ºbergeben und m√ºssen hieraus nun den Zentroiden ermitteln, zu dem die Distanz des `Datenpunkts` am geringsten ist. √úberlege dir vorher, wie du vorgehen m√∂chtest. Zur√ºckgegeben wird der Index des ermittelten Zentroiden. Wenn also der 3. Zentroid der n√§chstgelegene ist, dann muss der Index 2 zur√ºckgegeben wird (da Index bei 0 beginnt)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def finde_naechsten_zentroiden(zentroiden: list[Datenpunkt], datenpunkt: Datenpunkt) -> int:\n",
    "    \"\"\"Finde den n√§chsten Zentroiden f√ºr einen gegebenen Datenpunkt. Wenn es mehrere Zentroiden mit\n",
    "       der gleichen minimalen Distanz gibt, wird der erste gefundene Zentroid zur√ºckgegeben.\n",
    "       Return: Index (!) des n√§chsten Zentroiden.  \n",
    "       Z.B: 2 bedeutet, dass der dritte (!) Zentroid der n√§chstgelegene f√ºr den Datenpunkt ist.\"\"\"\n",
    "    ...  # Hier L√∂sung erg√§nzen\n",
    "    geringste_distanz = float('inf')\n",
    "    naechster_zentroid: int\n",
    "    index = 0\n",
    "    for zentroid in zentroiden:\n",
    "        distanz = berechne_euklidische_distanz(datenpunkt, zentroid)\n",
    "        logger.debug(f\"Distanz von {datenpunkt} zu Zentroid {index} ({zentroid}): {distanz}\")\n",
    "        if distanz < geringste_distanz:\n",
    "            geringste_distanz = distanz\n",
    "            naechster_zentroid = index\n",
    "        index += 1\n",
    "    logger.debug(f\"N√§chster Zentroid f√ºr {datenpunkt} ist Zentroid {naechster_zentroid}\")\n",
    "    return naechster_zentroid\n",
    "\n",
    "logger.info('Funktion finde_naechsten_zentroiden definiert')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unit-Tests f√ºr `finde_naechsten_zentroiden()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "def test_finde_naechsten_zentroiden():\n",
    "    # Testfall zur √úberpr√ºfung der Funktion finde_naechsten_zentroiden\n",
    "    datenpunkte = [Datenpunkt(x, y) for x, y in [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]]\n",
    "    datenpunkt = Datenpunkt(4, 5)\n",
    "    naechster_zentroid_index = finde_naechsten_zentroiden(datenpunkte, datenpunkt)\n",
    "    assert naechster_zentroid_index == 1, f\"Erwarteter n√§chster Zentroid Index: 1, aber erhalten: {naechster_zentroid_index}\"\n",
    "\n",
    "test_finde_naechsten_zentroiden()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Aufgabe 3: Erzeugen der Cluster\n",
    "\n",
    "Nachdem wir den n√§chsten Zentroiden zu einem Datenpunkt berechnen k√∂nnen, sind wir nun in der Lage, alle Datenpunkte zu clustern. Mit der Methode `weise_cluster_zu()` k√∂nnen wir nun f√ºr jeden Datenpunkt den n√§chsten Zentroiden ermitteln und daraus die Cluster bilden.\n",
    "\n",
    "In der Methode unten ist bereits das Erzeugen der leeren Cluster erfolgt, darum musst du dich nicht k√ºmmern. Was du noch erg√§nzen musst, ist das Ermitteln des n√§chsten Zentroiden zu jedem Datenpunkt. Mit dem erhaltenen Index kannst du im Dictionary dann den Datenpunkt dem zugeh√∂rigen Cluster anh√§ngen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def berechne_cluster(datenpunkte: list[Datenpunkt], zentroiden: list[Datenpunkt]) -> dict[int, list[Datenpunkt]]:\n",
    "    \"\"\"Weist jeden Datenpunkt den entsprechenden Cluster zu.  \n",
    "       Return: Dictionary mit den Clustern und den zugeh√∂rigen Datenpunkten.\n",
    "        Z.B: {0: [Datenpunkt(1.4, 4.5), Datenpunkt(1.6, 4.7)], 1: [Datenpunkt(5.2, 8.3), Datenpunkt(5.1, 8.2)], 2: [Datenpunkt(3.1, 9.2)]}\"\"\"\n",
    "    clusters: dict[int, list[Datenpunkt]] = {}\n",
    "    for zentroid in range(len(zentroiden)):\n",
    "        clusters[zentroid] = []\n",
    "\n",
    "    ...  # Hier die weitere L√∂sung erg√§nzen\n",
    "    for datenpunkt in datenpunkte:\n",
    "        index_naechster_zentroid = finde_naechsten_zentroiden(zentroiden, datenpunkt)\n",
    "        clusters[index_naechster_zentroid].append(datenpunkt)\n",
    "        logger.debug(f\"{datenpunkt} wurde Zentroid {index_naechster_zentroid} zugewiesen\")\n",
    "    logger.debug(f\"Zuweisungen der Datenpunkte zu Zentroiden: {clusters}\")\n",
    "    return clusters\n",
    "\n",
    "logger.info('Funktion weise_cluster_zu definiert')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unit-Tests f√ºr `berechne_cluster()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "def test_berechne_cluster():\n",
    "    # Testfall zur √úberpr√ºfung der Zuweisung der Datenpunkte zu den n√§chsten Zentroiden\n",
    "    datenpunkte = [Datenpunkt(x, y) for x, y in [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]]\n",
    "    zentroiden = [Datenpunkt(2, 3), Datenpunkt(6, 7), Datenpunkt(8, 9)]\n",
    "    clusters = berechne_cluster(datenpunkte, zentroiden)\n",
    "    erwartete_clusters = {\n",
    "        0: [Datenpunkt(1, 2), Datenpunkt(3, 4)],\n",
    "        1: [Datenpunkt(5, 6), Datenpunkt(7, 8)],\n",
    "        2: [Datenpunkt(9, 10)]\n",
    "    }\n",
    "    for cluster_index, datenpunkte_im_cluster in erwartete_clusters.items():\n",
    "        assert len(clusters[cluster_index]) == len(datenpunkte_im_cluster), f\"Erwartete Anzahl der Datenpunkte im Cluster {cluster_index}: {len(datenpunkte_im_cluster)}, aber erhalten: {len(clusters[cluster_index])}\"\n",
    "        for datenpunkt in datenpunkte_im_cluster:\n",
    "            assert datenpunkt in clusters[cluster_index], f\"Erwarteter Datenpunkt {datenpunkt} nicht im Cluster {cluster_index} gefunden\"\n",
    "\n",
    "test_berechne_cluster()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Aufgabe 4: Aktualisieren der Zentroiden\n",
    "\n",
    "Wir kommen der fertigen Implementierung des k-Means-Algorithmus immer n√§her.\n",
    "\n",
    "## Koordinaten eines Zentroiden berechnen\n",
    " Wir ben√∂tigen nun zum einen noch eine Funktion `berechne_zentroid_koordinaten()`, welche uns aus den Datenpunkten eines Clusters die neuen Koordinaten des Zentroiden berechnet. Diese Funktion wird dann von `aktualisiere_zentroiden()` verwendet, um die Zentroiden in jeder Iteration alle neu zu berechnen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def berechne_zentroid_koordinaten(datenpunkte: list[Datenpunkt]) -> Datenpunkt:\n",
    "    \"\"\"Berechnet die Koordinaten des Zentroiden basierend auf den zugeh√∂rigen Datenpunkten. Dabei wird\n",
    "       der Mittelwert der X- und Y-Koordinaten der Datenpunkte berechnet.\n",
    "       Return: Position des Zentroiden als Datenpunkt.  \n",
    "       Z.B: Datenpunkt(2.5, 3.7)\"\"\"\n",
    "    ...  # Hier L√∂sung erg√§nzen\n",
    "    x_summe = 0\n",
    "    y_summe = 0\n",
    "    for datenpunkt in datenpunkte:\n",
    "        x_summe += datenpunkt.x\n",
    "        y_summe += datenpunkt.y\n",
    "    x_mittelwert = x_summe / len(datenpunkte)\n",
    "    y_mittelwert = y_summe / len(datenpunkte)\n",
    "\n",
    "    return Datenpunkt(x_mittelwert, y_mittelwert)\n",
    "\n",
    "logger.info('Funktion berechne_zentroid definiert')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unit-Tests f√ºr `berechne_zentroid_koordinaten()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "def test_berechne_zentroid_koordinaten():\n",
    "    logger.info('Testfall f√ºr die Berechnung des Zentroiden')\n",
    "    # Testfall zur √úberpr√ºfung der Berechnung des Zentroiden\n",
    "    datenpunkte = [Datenpunkt(x, y) for x, y in [(1, 1), (2, 3), (5, 6), (7, 8), (9, 10)]]\n",
    "    zentroid = berechne_zentroid_koordinaten(datenpunkte)\n",
    "    assert zentroid.x == 4.8, f\"Erwarteter x-Wert des Zentroiden: 4.8, aber erhalten: {zentroid.x}\"\n",
    "    assert zentroid.y == 5.6, f\"Erwarteter y-Wert des Zentroiden: 5.6, aber erhalten: {zentroid.y}\"\n",
    "\n",
    "test_berechne_zentroid_koordinaten()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zentroiden f√ºr alle Cluster neu berechnen\n",
    "\n",
    "Nun wird es spannend: Mit Hilfe der vorigen Methode `berechne_zentroid_koordinaten()` kannst du nun f√ºr alle Cluster die Zentroiden neu berechnen lassen. `aktualisiere_zentroiden()` erh√§lt dabei ein Dictionary der Clusters. Ein Eintrag im Dictionary ist dabei der Index des Clusters und die dazugeh√∂rigen Datenpunkte. Es ist m√∂glich, √ºber die Werte des Dictionary zu iterieren mit `dict.values()`\n",
    "\n",
    "Ein Beispiel:\n",
    "```python\n",
    "clusters = {\n",
    "    0: [Datenpunkt(1, 1), Datenpunkt(2, 2)],\n",
    "    1: [Datenpunkt(4, 4), Datenpunkt(5, 5)],\n",
    "    2: [Datenpunkt(8, 8), Datenpunkt(9, 9)]\n",
    "}\n",
    "\n",
    "for datenpunkte_in_cluster in clusters.values():\n",
    "    ...\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def aktualisiere_zentroiden(clusters: dict[int, list[Datenpunkt]]) -> list[Datenpunkt]:\n",
    "    \"\"\"Aktualisiert die Zentroiden basierend auf den zugewiesenen Datenpunkten.  \n",
    "       Return: Liste der neuen Zentroiden.  \n",
    "       Z.B: [Datenpunkt(1.4, 4.5), Datenpunkt(5.2, 8.3), Datenpunkt(3.1, 9.2)]\"\"\"\n",
    "    ...  # Hier L√∂sung erg√§nzen\n",
    "    neue_zentroiden: list[Datenpunkt] = []\n",
    "    for datenpunkte_in_cluster in clusters.values():\n",
    "        neuer_zentroid: Datenpunkt = berechne_zentroid_koordinaten(datenpunkte_in_cluster)\n",
    "        neue_zentroiden.append(neuer_zentroid)\n",
    "    logger.info(f\"Aktualisierte Zentroiden: {neue_zentroiden}\")\n",
    "    return neue_zentroiden"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unit-Tests f√ºr `aktualisiere_zentroiden()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "def test_aktualisiere_zentroiden_einfach():\n",
    "    # Testfall zur √úberpr√ºfung der Aktualisierung der Zentroiden\n",
    "    clusters = {\n",
    "        0: [Datenpunkt(1, 1), Datenpunkt(2, 2)],\n",
    "        1: [Datenpunkt(4, 4), Datenpunkt(5, 5)],\n",
    "        2: [Datenpunkt(8, 8), Datenpunkt(9, 9)]\n",
    "    }\n",
    "    aktualisierte_zentroiden = aktualisiere_zentroiden(clusters)\n",
    "    erwartete_zentroiden = [\n",
    "        Datenpunkt(1.5, 1.5),\n",
    "        Datenpunkt(4.5, 4.5),\n",
    "        Datenpunkt(8.5, 8.5)\n",
    "    ]\n",
    "    for i in range(len(aktualisierte_zentroiden)):\n",
    "        assert aktualisierte_zentroiden[i] == erwartete_zentroiden[i], f\"Erwarteter Zentroid: {erwartete_zentroiden[i]}, aber erhalten: {aktualisierte_zentroiden[i]}\"\n",
    "\n",
    "def test_aktualisiere_zentroiden_komplex():\n",
    "    # Testfall zur √úberpr√ºfung der Aktualisierung der Zentroiden mit mehr Variabilit√§t\n",
    "    clusters = {\n",
    "        0: [Datenpunkt(1, 2), Datenpunkt(2, 3), Datenpunkt(3, 4)],\n",
    "        1: [Datenpunkt(5, 5), Datenpunkt(6, 7), Datenpunkt(7, 8)],\n",
    "        2: [Datenpunkt(8, 9), Datenpunkt(10, 11), Datenpunkt(12, 13)]\n",
    "    }\n",
    "    aktualisierte_zentroiden = aktualisiere_zentroiden(clusters)\n",
    "    erwartete_zentroiden = [\n",
    "        Datenpunkt(2.0, 3.0),  # Durchschnitt der ersten Cluster-Datenpunkte (1,2), (2,3), (3,4)\n",
    "        Datenpunkt(6.0, 6.67),  # Durchschnitt der zweiten Cluster-Datenpunkte (5,5), (6,7), (7,8)\n",
    "        Datenpunkt(10.0, 11.0)  # Durchschnitt der dritten Cluster-Datenpunkte (8,9), (10,11), (12,13)\n",
    "    ]\n",
    "    for i in range(len(aktualisierte_zentroiden)):\n",
    "        assert round(aktualisierte_zentroiden[i].x, 2) == round(erwartete_zentroiden[i].x, 2), f\"Erwarteter Zentroid X-Wert: {erwartete_zentroiden[i].x}, aber erhalten: {aktualisierte_zentroiden[i].x}\"\n",
    "        assert round(aktualisierte_zentroiden[i].y, 2) == round(erwartete_zentroiden[i].y, 2), f\"Erwarteter Zentroid Y-Wert: {erwartete_zentroiden[i].y}, aber erhalten: {aktualisierte_zentroiden[i].y}\"\n",
    "\n",
    "test_aktualisiere_zentroiden_einfach()\n",
    "test_aktualisiere_zentroiden_komplex()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Finale: k-Means-Clustering vollendet\n",
    "\n",
    "Wir haben nun alle n√∂tigen Untermethoden f√ºr den Algorithmus erzeugt und k√∂nnen ihn nun starten."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def k_means(datenpunkte: list[Datenpunkt], anzahl_cluster: int, max_iterationen: int) -> None:\n",
    "    \"\"\"Hauptfunktion f√ºr den k-means Algorithmus. F√ºhrt den k-means Clustering Algorithmus aus.\"\"\"\n",
    "    # 2. Initialisierung der Zentroiden\n",
    "    zentroiden = initialisiere_zentroiden(datenpunkte, anzahl_cluster)\n",
    "\n",
    "    for iteration in range(max_iterationen):\n",
    "        logger.info(f\"Iteration {iteration + 1}\")\n",
    "        # 3. Zuweisung der Datenpunkte und Bildung der Cluster\n",
    "        clusters = berechne_cluster(datenpunkte, zentroiden)\n",
    "        plot_cluster(clusters, zentroiden, iteration + 1)\n",
    "        \n",
    "        # 4. Aktualisierung der Zentroiden\n",
    "        neue_zentroiden = aktualisiere_zentroiden(clusters)\n",
    "        \n",
    "        # 5. √úberpr√ºfung, ob sich die Zentroiden ver√§ndert haben\n",
    "        if neue_zentroiden == zentroiden:\n",
    "            logger.info(\"Zentroiden haben sich nicht mehr ver√§ndert. Algorithmus stoppt.\")\n",
    "            break\n",
    "        zentroiden = neue_zentroiden\n",
    "    logger.info(f\"Endg√ºltige Zentroiden: {zentroiden}\")\n",
    "\n",
    "# Starte den k-means Algorithmus mit 100 Datenpunkten, 3 Zentroiden und maximal 10 Iterationen\n",
    "datenpunkte = generiere_datenpunkte(100, zahlenraum=10)\n",
    "k_means(datenpunkte=datenpunkte, anzahl_cluster=3, max_iterationen=100)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "def plot_cluster(clusters, zentroiden, iteration):\n",
    "    farben = ['red', 'green', 'blue', 'orange', 'purple']\n",
    "    \n",
    "    plt.figure(figsize=(8, 6))\n",
    "    for cluster_index, cluster_datenpunkte in clusters.items():\n",
    "        x_coords = [datenpunkt.x for datenpunkt in cluster_datenpunkte]\n",
    "        y_coords = [datenpunkt.y for datenpunkt in cluster_datenpunkte]\n",
    "        plt.scatter(x_coords, y_coords, color=farben[cluster_index], label=f'Cluster {cluster_index + 1} ({zentroiden[cluster_index].x}, {zentroiden[cluster_index].y})')\n",
    "    \n",
    "    zentroid_x_coords = [zentroid.x for zentroid in zentroiden]\n",
    "    zentroid_y_coords = [zentroid.y for zentroid in zentroiden]\n",
    "    plt.scatter(zentroid_x_coords, zentroid_y_coords, color='black', marker='x', s=100)  # Zentroiden ohne Legende\n",
    "    \n",
    "    plt.title(f'k-means Clustering - Iteration {iteration}')\n",
    "    plt.xlabel('X-Koordinate')\n",
    "    plt.ylabel('Y-Koordinate')\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
